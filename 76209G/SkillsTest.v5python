{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nMotorL_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nMotorL_motor_b = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nMotorL = MotorGroup(MotorL_motor_a, MotorL_motor_b)\nMotorR_motor_a = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nMotorR_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nMotorR = MotorGroup(MotorR_motor_a, MotorR_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # check the buttonL1/buttonL2 status\n            # to control MotorL\n            if controller_1.buttonL1.pressing():\n                MotorL.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                MotorL.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                MotorL.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonR1/buttonR2 status\n            # to control MotorR\n            if controller_1.buttonR1.pressing():\n                MotorR.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                MotorR.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                MotorR.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nmyVariable = 0\n\ndef when_started1():\n    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    controller_1.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"Regular\")\n    controller_1.screen.next_row()\n\ndef ondriver_drivercontrol_0():\n    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    brain.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"Driver\")\n    controller_1.screen.next_row()\n    while True:\n        MotorL.spin(FORWARD, (Controller1.Axis4.position() / 10.0), VOLT)\n        MotorR.spin(FORWARD, (Controller1.Axis4.position() / 10.0), VOLT)\n        MotorL.spin(FORWARD, (Controller1.Axis3.position() / 10.0), VOLT)\n        MotorR.spin(REVERSE, (Controller1.Axis3.position() / 10.0), VOLT)\n        wait(5, MSEC)\n\ndef onauton_autonomous_0():\n    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    brain.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"Autonomous\")\n    controller_1.screen.next_row()\n    MotorL.spin_for(FORWARD, 180, DEGREES, wait=False)\n    MotorR.spin_for(REVERSE, 180, DEGREES, wait=False)\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"MotorL","leftDir":"false","right":"MotorR","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1,11],"name":"MotorL","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[10,20],"name":"MotorR","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}