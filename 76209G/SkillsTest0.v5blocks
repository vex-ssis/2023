{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_looks_set_cursor\" id=\"p5L]WEi+@fwzQ1yd;7Fp\"><field name=\"TARGET\">Controller1</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\".X.q!V67@N7yAyL+O;H-\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"Pa_|h#}Ui@t8Inl71fyG\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"BB$~^I{mm`JIc?v/N,0%\"><field name=\"TARGET\">Controller1</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"$^KUlxlTNcTvcc,XcO+f\"><field name=\"TEXT\">Regular</field></shadow></value></block></next></block></next></block><block type=\"v5_events_when_driver\" id=\"~i/as4*zkl|n6,u!WD0m\" x=\"70\" y=\"530\"><next><block type=\"v5_looks_set_cursor\" id=\")Ak-r$jxMc`lz2gYn4iE\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"8R^wb}p90xAu+VOt7X()\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"z-#ZqQQz4Sp|^MUt6*~E\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"!KSz@f-YL}@QMcvU,ywB\"><field name=\"TARGET\">Controller1</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"[EF^yENuikoXBtGQ6STS\"><field name=\"TEXT\">Driver</field></shadow></value><next><block type=\"v5_control_forever\" id=\"%D}g8;(T%?amoxIbajem\"><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin_at_voltage\" id=\"G`E%rTQklOMXkQ^n+p7n\"><field name=\"MOTOR\">MotorL</field><field name=\"DIRECTION\">fwd</field><value name=\"VOLTAGE\"><shadow type=\"math_number\" id=\"PbqX1yp}kELzX}8#d}8c\"><field name=\"NUM\">10</field></shadow><block type=\"v5_operator_divide\" id=\"po%{5My9z3J,6o`%ltQ9\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\"JuYH-qSI7/LCWEuIgI]5\"><field name=\"NUM\"></field></shadow><block type=\"v5_sensing_position_of_controller\" id=\"LZX5ALWYZlbaB90WXUSe\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis4</field></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\")7!-vhQjZ*DA-RJ!i4Q:\"><field name=\"NUM\">10</field></shadow></value></block></value><next><block type=\"v5_motion_spin_at_voltage\" id=\"3OGs!k+O[TUC~p%T/}S/\"><field name=\"MOTOR\">MotorR</field><field name=\"DIRECTION\">fwd</field><value name=\"VOLTAGE\"><shadow type=\"math_number\" id=\"3KDTK9JzLTV?Vy=_L/}D\"><field name=\"NUM\">10</field></shadow><block type=\"v5_operator_divide\" id=\"~ql/k#9xhc.~gQEB#WDP\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\"6FkK65u8[.`v;Ez8aGmA\"><field name=\"NUM\"></field></shadow><block type=\"v5_sensing_position_of_controller\" id=\"aHH#]c1Q@bR69k.Hs;l*\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis4</field></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\"1tjCeewSd,6B=pr`33Is\"><field name=\"NUM\">10</field></shadow></value></block></value><next><block type=\"v5_motion_spin_at_voltage\" id=\"I^$@3Em*edw=}qNo=^%9\"><field name=\"MOTOR\">MotorL</field><field name=\"DIRECTION\">fwd</field><value name=\"VOLTAGE\"><shadow type=\"math_number\" id=\"J4Z`!3LFVS}$lBnDUfnM\"><field name=\"NUM\">10</field></shadow><block type=\"v5_operator_divide\" id=\"e),W$aclNgy%t|m)J-^g\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\"NaULu^8:;MVN%d4y93d!\"><field name=\"NUM\"></field></shadow><block type=\"v5_sensing_position_of_controller\" id=\"^-p;b,V|V7%d,D7s2?#t\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis3</field></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\"1CK4vNo?xe)K0GmsvqH.\"><field name=\"NUM\">10</field></shadow></value></block></value><next><block type=\"v5_motion_spin_at_voltage\" id=\"Yl2myRTqSnBXZdHZKRs9\"><field name=\"MOTOR\">MotorR</field><field name=\"DIRECTION\">rev</field><value name=\"VOLTAGE\"><shadow type=\"math_number\" id=\"DiclIG[;i;3.e-@ZXfPZ\"><field name=\"NUM\">10</field></shadow><block type=\"v5_operator_divide\" id=\"b2:1L%z[v${^4UrCC#r:\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\".LT}j6a;^XP8NX,FNde}\"><field name=\"NUM\"></field></shadow><block type=\"v5_sensing_position_of_controller\" id=\"6^MuBJS=@1gFj_*I?2v^\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis3</field></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\"]:LrGf]Zd}^UTFfeMI_H\"><field name=\"NUM\">10</field></shadow></value></block></value></block></next></block></next></block></next></block></statement></block></next></block></next></block></next></block><block type=\"v5_events_when_autonomous\" id=\"JA7r]z|Q6;mK`r.+exy^\" x=\"90\" y=\"1170\"><next><block type=\"v5_looks_set_cursor\" id=\"HJ7)b0sdol1aNPs([Y9?\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"^$ACw,C3oo2T@s=HbNfJ\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"`Fz@*gP[j]qH~VR~(=9K\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"qW4WKUs^r|UvY)}z:elR\"><field name=\"TARGET\">Controller1</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"lV}ApmOR%Y|oB$k[tHd*\"><field name=\"TEXT\">Autonomous</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"-/4P^oby/G`%}A!KTC|K\"><field name=\"MOTOR\">MotorL</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">TRUE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"##Mw3{+g-x,P4Yt0#owW\"><field name=\"NUM\">180</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"ok)!+ELGJnt]`VmN|oix\"><field name=\"MOTOR\">MotorR</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">TRUE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"]sz..-/k^dNX.s[CN5l~\"><field name=\"NUM\">180</field></shadow></value></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"MotorL","leftDir":"false","right":"MotorR","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}},{"port":[1,11],"name":"MotorL","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"}},{"port":[10,20],"name":"MotorR","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"}}],"slot":3,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor MotorLMotorA = motor(PORT1, ratio18_1, false);\nmotor MotorLMotorB = motor(PORT11, ratio18_1, true);\nmotor_group MotorL = motor_group(MotorLMotorA, MotorLMotorB);\n\nmotor MotorRMotorA = motor(PORT10, ratio18_1, false);\nmotor MotorRMotorB = motor(PORT20, ratio18_1, true);\nmotor_group MotorR = motor_group(MotorRMotorA, MotorRMotorB);\n\n\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonL1/ButtonL2 status to control MotorL\n      if (Controller1.ButtonL1.pressing()) {\n        MotorL.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        MotorL.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        MotorL.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control MotorR\n      if (Controller1.ButtonR1.pressing()) {\n        MotorR.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        MotorR.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        MotorR.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Controller1.Screen.setCursor(1, 1);\n  Controller1.Screen.print(\"Regular\");\n  Controller1.Screen.newLine();\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  Brain.Screen.setCursor(1, 1);\n  Controller1.Screen.print(\"Driver\");\n  Controller1.Screen.newLine();\n  while (true) {\n    MotorL.spin(forward, (Controller1.Axis4.position() / 10.0), volt);\n    MotorR.spin(forward, (Controller1.Axis4.position() / 10.0), volt);\n    MotorL.spin(forward, (Controller1.Axis3.position() / 10.0), volt);\n    MotorR.spin(reverse, (Controller1.Axis3.position() / 10.0), volt);\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Brain.Screen.setCursor(1, 1);\n  Controller1.Screen.print(\"Autonomous\");\n  Controller1.Screen.newLine();\n  MotorL.spinFor(forward, 180.0, degrees, false);\n  MotorR.spinFor(reverse, 180.0, degrees, false);\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}