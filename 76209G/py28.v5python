{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\nimport math\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nmotor_FL = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nmotor_BL = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nmotor_FR = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nmotor_BR = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nmotor_roller = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nmotorIntake = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)\ngyro_h = Gyro(brain.three_wire_port.h)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_right_shoulder_control_motors_stopped = True\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # check the buttonR1/buttonR2 status\n            # to control motor_roller\n            if controller_1.buttonR1.pressing():\n                motor_roller.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                motor_roller.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                motor_roller.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nmyVariable = 0\n\ndef when_started1():\n    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    controller_1.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"Regular\")\n    controller_1.screen.next_row()\n    gyro_h.set_heading(0, DEGREES)\n\ndef ondriver_drivercontrol_0():\n    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    motor_roller.set_velocity(100, PERCENT)\n    motorIntake.set_velocity(100, PERCENT)\n\n    controller_1.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"User Control    \")\n    controller_1.screen.next_row()\n    while True:\n        theta = (gyro_h.heading(DEGREES)*math.pi)/180\n        c = math.cos(theta)**2\n        s = -math.sin(theta)**2\n        if theta > math.pi:\n            s = -s\n        if theta > math.pi / 2 and theta < math.pi * 3 / 2:\n            c = -c\n        mFL = (  c + s, c - s, -1)\n        mBL = ( -c + s, c + s,  1)\n        mFR = ( -c + s, c + s, -1)\n        mBR = (  c + s, c - s,  1)    \n        fb = controller_1.axis3.position()\n        lr = controller_1.axis4.position()\n        jaw = controller_1.axis1.position()\n        speed_FL = mFL[0]*fb + mFL[1]*lr + mFL[2]*jaw\n        speed_BL = mBL[0]*fb + mBL[1]*lr + mBL[2]*jaw\n        speed_FR = mFR[0]*fb + mFR[1]*lr + mFR[2]*jaw\n        speed_BR = mBR[0]*fb + mBR[1]*lr + mBR[2]*jaw\n        motor_FL.spin(FORWARD, speed_FL, PERCENT)\n        motor_BL.spin(FORWARD, speed_BL, PERCENT)\n        motor_FR.spin(FORWARD, speed_FR, PERCENT)\n        motor_BR.spin(FORWARD, speed_BR, PERCENT)\n        controller_1.screen.set_cursor(2, 1)\n        controller_1.screen.print(fb, lr, jaw, theta, \"    \")\n        controller_1.screen.next_row()\n        controller_1.screen.print(speed_FL, speed_BL, speed_FR, speed_BR, \"      \")\n        if controller_1.buttonR1.pressing():\n            motor_roller.spin(FORWARD)\n        elif controller_1.buttonR2.pressing():\n            motor_roller.spin(REVERSE)\n        else:\n            motor_roller.stop()\n        if controller_1.buttonL1.pressing():\n            motorIntake.spin(FORWARD)\n        elif controller_1.buttonL2.pressing():\n            motorIntake.spin(REVERSE)\n        else:\n            motorIntake.stop()\n\n        wait(5, MSEC)\n\ndef onauton_autonomous_0():\n    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    brain.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"Autonomous\")\n    controller_1.screen.next_row()\n    motor_FL.spin_for(FORWARD, 180, DEGREES, wait=False)\n    motor_FR.spin_for(REVERSE, 180, DEGREES, wait=False)\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"motor_roller","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"motor_FL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[11],"name":"motor_BL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[10],"name":"motor_FR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[20],"name":"motor_BR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[8],"name":"motor_roller","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[19],"name":"motorIntake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"gyro_h","customName":false,"deviceType":"Gyro","deviceClass":"gyro","setting":{"id":"partner"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}