{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 370, 345, MM, 1)\ncontroller_1 = Controller(PRIMARY)\nIntake = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nRollerwheel = Motor(Ports.PORT12, GearSetting.RATIO_36_1, False)\nShooter_motor_a = Motor(Ports.PORT15, GearSetting.RATIO_6_1, False)\nShooter_motor_b = Motor(Ports.PORT19, GearSetting.RATIO_6_1, True)\nShooter = MotorGroup(Shooter_motor_a, Shooter_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\ncontroller_1_x_b_buttons_control_motors_stopped = True\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, controller_1_x_b_buttons_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control Intake\n            if controller_1.buttonL1.pressing():\n                Intake.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                Intake.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                Intake.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonR1/buttonR2 status\n            # to control Shooter\n            if controller_1.buttonR1.pressing():\n                Shooter.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                Shooter.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                Shooter.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n            # check the buttonX/buttonB status\n            # to control Rollerwheel\n            if controller_1.buttonX.pressing():\n                Rollerwheel.spin(FORWARD)\n                controller_1_x_b_buttons_control_motors_stopped = False\n            elif controller_1.buttonB.pressing():\n                Rollerwheel.spin(REVERSE)\n                controller_1_x_b_buttons_control_motors_stopped = False\n            elif not controller_1_x_b_buttons_control_motors_stopped:\n                Rollerwheel.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_x_b_buttons_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\ncounter = 0\ncolumn = 0\n\ndef main():\n    global counter, column, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    brain.screen.print(\"Ready to start 76209M!\")\n    controller_1.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"This is 76209M\")\n    controller_1.screen.next_row()\n    controller_1.screen.print(\"AKA The Masters\")\n    controller_1.screen.next_row()\n    Shooter.set_velocity(100, PERCENT)\n    Intake.set_velocity(100, PERCENT)\n    Rollerwheel.set_velocity(100, PERCENT)\n    wait(1, SECONDS)\n    counter = 0\n    for repeat_count in range(30):\n        controller_1.screen.set_cursor(3, 1)\n        controller_1.screen.print(\"Location is at \")\n        controller_1.screen.print(column)\n        controller_1.screen.set_cursor(1, column)\n        controller_1.screen.print(\"This is 76209M\")\n        controller_1.screen.set_cursor(2, column)\n        controller_1.screen.print(\"I have no idea\")\n        wait(0.5, SECONDS)\n        column = column + 1\n        wait(5, MSEC)\n\nmain()\n","textLanguage":"python","rconfig":[{"port":[10,20,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"370","unit":"mm","wheelbase":"345","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Intake","leftDir":"false","right":"Shooter","rightDir":"false","upDown":"","upDownDir":"false","xB":"Rollerwheel","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[11],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[12],"name":"Rollerwheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[15,19],"name":"Shooter","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22}],"slot":5,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}