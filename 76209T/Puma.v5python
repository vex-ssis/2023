{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nIntake = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\nflywheel = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)\ngps_13 = Gps(Ports.PORT13, 0.00, 0.00, MM, 180)\nleft_drive_smart = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\ndrivetrain_inertial = Inertial(Ports.PORT6)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # stop the motors if the brain is calibrating\n            if drivetrain_inertial.is_calibrating():\n                left_drive_smart.stop()\n                right_drive_smart.stop()\n                while drivetrain_inertial.is_calibrating():\n                    sleep(25, MSEC)\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control flywheel\n            if controller_1.buttonL1.pressing():\n                flywheel.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                flywheel.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                flywheel.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonR1/buttonR2 status\n            # to control Intake\n            if controller_1.buttonR1.pressing():\n                Intake.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                Intake.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                Intake.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nmyVariable = 0\n\ndef main():\n    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    Intake.set_velocity(80, PERCENT)\n    flywheel.set_velocity(100, PERCENT)\n\n    while True:\n        brain.screen.set_cursor(1, 1)\n        brain.screen.print(\"Battery in percent: \")\n        brain.screen.print(brain.battery.capacity(), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n        brain.screen.next_row()\n        brain.screen.print(\"Orientation: \")\n        brain.screen.print(drivetrain.heading(), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n        brain.screen.next_row()\n        brain.screen.print(\"Velocity: \")\n        brain.screen.print(drivetrain.velocity(PERCENT), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n        brain.screen.next_row()\n        brain.screen.print(\"Drive efficiency: \")\n        brain.screen.print(drivetrain.efficiency(), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n        brain.screen.next_row()\n        brain.screen.print(\"Drive torque in Nm: \")\n        brain.screen.print(drivetrain.torque(TorqueUnits.NM), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n        brain.screen.next_row()\n        brain.screen.print(\"Drive temperature in percent: \")\n        brain.screen.print(drivetrain.temperature(PERCENT), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n        brain.screen.next_row()\n        brain.screen.print(\"GPS quality: \", gps_13.quality())\n        brain.screen.next_row()\n        brain.screen.print(\"Temp\", flywheel.temperature(PERCENT))\n        brain.screen.next_row()\n        brain.screen.print(\"speed\", flywheel.velocity(PERCENT))\n\n        # get the speed as a bar graph\n        brain.screen.draw_rectangle(0, 180, 480, 15)\n        brain.screen.set_fill_color(Color.RED)\n        brain.screen.draw_rectangle(0, 180, flywheel.velocity(PERCENT) * 4, 15)\n        brain.screen.set_fill_color(Color.BLACK)\n\n\n\n        #lightshow()\n        # wait(0.5, SECONDS)\n        controller_1.screen.set_cursor(1, 1)\n        controller_1.screen.print(\"Heading: \", drivetrain.heading(DEGREES))\n        controller_1.screen.next_row()\n        controller_1.screen.print(\"Bat\", brain.battery.voltage(VOLT), \"Volt \")\n        controller_1.screen.print(brain.battery.capacity(), \"% \")\n        controller_1.screen.next_row()\n        controller_1.screen.print(\"Temp\", flywheel.temperature(PERCENT))\n        \n        wait(5, MSEC)\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\nmain()\n","textLanguage":"python","rconfig":[{"port":[1],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"flywheel","leftDir":"false","right":"Intake","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[9],"name":"flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[13],"name":"gps_13","customName":false,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"},"triportSourcePort":22},{"port":[12,19,6],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}