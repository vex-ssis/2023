{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"50\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"ZzgY@lLTqY*Miwmr2hH6\"><field name=\"MOTOR\">Intake</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"sh7@8lAjRu%%w`@1PfJZ\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"v5_looks_controller_play_rumble\" id=\"BdV9wV?l~3`Ngsn_r9BB\"><field name=\"PATTERN\">-.-.</field><field name=\"CONTROLLER\">Controller1</field><next><block type=\"v5_control_forever\" id=\"qi`v{nEaXP5S*tM)Vz;m\"><statement name=\"SUBSTACK\"><block type=\"v5_looks_set_cursor\" id=\"SA7SsYBvbDUJ{n2wPl{-\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"Dxh?)WDk2korj;u/EDhM\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"T#nDJqdcm:t([Drmy)3K\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"=;eyro9tIsin/;wMI.gL\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"0CG%hc?[z{xmWz[]1)k^\"><field name=\"TEXT\">Battery in percent: </field></shadow></value><next><block type=\"v5_looks_print\" id=\"Y;kDs!y/CBIzNX2x{^HC\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"03QnHXUAOh?%O.#_6?KZ\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_battery_level\" id=\"U#[V)0o}:H:FKq,h3Dz+\"></block></value><next><block type=\"v5_looks_next_row\" id=\"svoF2,e|^_a7/$LJ(h}r\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_print\" id=\"F*LH]Di9MqcUvR^1NmpV\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"[L|tUFHT}8R5;p3$0,:S\"><field name=\"TEXT\">Orientation: </field></shadow></value><next><block type=\"v5_looks_print\" id=\"ot$z^K:Bl6{El`=USXT$\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"W$RH-INyy?Yq^0W9%5A#\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_drive_heading\" id=\"7;ttBadis17tFE7#}YR@\"></block></value><next><block type=\"v5_looks_next_row\" id=\"}ZLXHyY#d6Ps$5~77Xx-\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_print\" id=\"ZU0Zhz;y@P_%BtWc4u,E\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"wHP0Nf*JK[4BKjgmH^EV\"><field name=\"TEXT\">Velocity: </field></shadow></value><next><block type=\"v5_looks_print\" id=\"7DrMIZb]w6rPW8:SU($4\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"}yq)H)!-M7V^Sr?TRR)s\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_drive_velocity\" id=\"9Ro2x+H2*SMZ9Gn$KZ$b\"><field name=\"UNITS\">pct</field></block></value><next><block type=\"v5_looks_next_row\" id=\"F6Y4}yu6,Anr?X)(k#GL\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_print\" id=\",1M4vB[(_ufu4Q]1):Ui\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"xam4vN~5h_cY{6?sy:s_\"><field name=\"TEXT\">Drive efficiency: </field></shadow></value><next><block type=\"v5_looks_print\" id=\"r}fvHG|BWX+g-Jpq}k@l\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"n_;c~;MGP|k7l]dIw{M]\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_drive_efficiency\" id=\"q#R=`RPVu?0y;Mv}I{Mv\"></block></value><next><block type=\"v5_looks_next_row\" id=\"L5f.$I%%SJ.R6^avkt6x\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_print\" id=\"aNy??XzTOB|SGX)?JjW4\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"(:)MOWZ0r%@iLkF~F8}3\"><field name=\"TEXT\">Drive torque in Nm: </field></shadow></value><next><block type=\"v5_looks_print\" id=\"A1T}sx}-L@R]b8f}4}Pn\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"o#nwtU9~!{vS+rRgOJmG\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_drive_torque\" id=\"2Iv7pu7r4Rlq_]Ub/#F5\"><field name=\"UNITS\">Nm</field></block></value><next><block type=\"v5_looks_next_row\" id=\"(%J1mQ)F55.w=sz1?S6b\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_print\" id=\"iY8{HpoFL3cMH_QyY3Ow\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"2v#-3nF?5`byDMwvvnpD\"><field name=\"TEXT\">Drive temperature in percent: </field></shadow></value><next><block type=\"v5_looks_print\" id=\"lx5G;]^xusYy-vi+=!x_\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"c;t;.g*)ht(r#Mw`l@iO\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_drive_temperature\" id=\"xExf@ko?9ksT*j0lKWxY\"></block></value><next><block type=\"v5_looks_next_row\" id=\"03)2,m5MA=xV0jZ]`?%s\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_control_wait\" id=\"6scrNH@XC6|sW{$pk~sp\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"oJXjI@{wPefsWLxKv})X\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[11,12,19,20,6],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel325in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"Intake","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[10],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT11, ratio18_1, false);\nmotor leftMotorB = motor(PORT12, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT19, ratio18_1, true);\nmotor rightMotorB = motor(PORT20, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ninertial DrivetrainInertial = inertial(PORT6);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 299.24, 320, 40, mm, 1);\n\ncontroller Controller1 = controller(primary);\nmotor Intake = motor(PORT10, ratio18_1, false);\n\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // stop the motors if the brain is calibrating\n      if (DrivetrainInertial.isCalibrating()) {\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        while (DrivetrainInertial.isCalibrating()) {\n          wait(25, msec);\n        }\n      }\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis4\n      // right = Axis3 - Axis4\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis4.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis4.position();\n      \n      // check if the values are inside of the deadband range\n      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {\n        // check if the motors have already been stopped\n        if (DrivetrainNeedsToBeStopped_Controller1) {\n          // stop the drive motors\n          LeftDriveSmart.stop();\n          RightDriveSmart.stop();\n          // tell the code that the motors have been stopped\n          DrivetrainNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range\n        DrivetrainNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonR1/ButtonR2 status to control Intake\n      if (Controller1.ButtonR1.pressing()) {\n        Intake.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Intake.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Intake.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat myVariable;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Intake.setVelocity(80.0, percent);\n  Controller1.rumble(\"-.-.\");\n  while (true) {\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"Battery in percent: \");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Brain.Battery.capacity()));\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Orientation: \");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Drivetrain.heading()));\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Velocity: \");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Drivetrain.velocity(percent)));\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Drive efficiency: \");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Drivetrain.efficiency()));\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Drive torque in Nm: \");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Drivetrain.torque(Nm)));\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Drive temperature in percent: \");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Drivetrain.temperature(percent)));\n    Brain.Screen.newLine();\n    wait(1.0, seconds);\n  wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}