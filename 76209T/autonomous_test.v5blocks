{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_drivetrain_drive_for\" id=\"LI4/TVLZUJkfEphnd%pJ\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"Y_mjkoQdCfa*g~WOR45A\"><field name=\"NUM\">400</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"Zqo;]AJ?56qwKaK7^:=_\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"7SZJ5Kd8~DprB0J=PI6f\"><field name=\"NUM\">45</field></shadow></value><next><block type=\"v5_motion_stop_driving\" id=\")=!ti/GqfIxBN32cC%Mp\"></block></next></block></next></block></next></block><block type=\"v5_events_when_autonomous\" id=\"Ww=td_{D*Ya7+v_rKY%U\" x=\"510\" y=\"110\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"Mt6k}X2r8|c_6mE^J=ll\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"deK,f7s3QRY9j=wi9mV`\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"9h{Z9b.jKUBB(e}%K@~W\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"}4)lBvu`_%SgTVXn?wjV\"><field name=\"NUM\">200</field></shadow></value></block></next></block></next></block><block type=\"v5_events_when_driver\" id=\"/$UKmDj~hHq|MT3s*d(P\" x=\"510\" y=\"470\"><next><block type=\"v5_drivetrain_drive_for\" id=\"[5G}h`1vs+0EqtUur.{n\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"Jk()S:CbC;iU;ac{g%g3\"><field name=\"NUM\">200</field></shadow></value></block></next></block></xml>","rconfig":[{"port":[1,2,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT2, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\n\n\n\n\n\n// Generated code.\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.driveFor(forward, 400.0, mm, true);\n  Drivetrain.turnFor(right, 45.0, degrees, true);\n  Drivetrain.stop();\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Drivetrain.setDriveVelocity(50.0, percent);\n  Drivetrain.driveFor(forward, 200.0, mm, true);\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  Drivetrain.driveFor(reverse, 200.0, mm, true);\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}