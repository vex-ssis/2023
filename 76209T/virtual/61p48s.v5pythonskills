{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vrc import *\nfrom vexcode_vrc.events import get_Task_func\n  \n# constructors\n\ndrivetrain = Drivetrain()\nbrain = Brain()\nbottom_distance = Distance(\"BottomDistance\", 18)\nroller_optical = Optical(\"RollerOptical\", 2)\ngps = GPS(\"GPS\", 3)\nintake_motor_group = Motor(\"IntakeMotorGroup\", 10)\nbottom_line_tracker = LineTracker(\"BottomLineTracker\", 22)\nmiddle_line_tracker = LineTracker(\"MiddleLineTracker\", 23)\ntop_line_tracker = LineTracker(\"TopLineTracker\", 24)\n#endregion VEXcode Generated Robot Configuration\n\n# -------------------------------------------------\n# \n# \tProject:            VEXcode Project 2023\n#\tAuthor:             Matthias Kreier\n#\tCreated:            2023/03/27\n#\tDescription:        VEXcode V5 Python Project\n#   Starting Position:  A\n#   Preload:            2 disks\n# \n# -------------------------------------------------\n\nfrom math import sqrt\n\npath = [[-920,  920, 0],[-920,-1450, 0],[750, -1400, 0],[ 500,-1150, 1],[-600, -710, 0],\n        [ 400, -250, 1],[   0,    0, 0],[-600,  200, 0],[ 400,  400, 1],[   0,  950, 0],\n        [-600,  950, 0],[ 920,  950, 1],[ 920, 1500, 0],[-600, 1320, 0],[ 600,  600, 1],\n        [ 600, -600, 1],[1400,-1350, 1],[1500, -900, 0]]\n\ndef goto(target_x, target_y, reverse):\n    x1 = gps.x_position(MM)\n    y1 = gps.y_position(MM)\n    delta_x = target_x - x1\n    delta_y = target_y - y1\n    distance = math.sqrt(delta_x**2 + delta_y**2)     # pythagorean theorem\n    if ( delta_x == 0 ):\n        if ( delta_y < 0):\n            direction = 90\n        else:\n            direction = 270\n    else:\n        direction = - math.atan(delta_y / delta_x) * 180 / math.pi\n    if ( delta_x < 0 ):\n        direction = direction + 180\n    if ( reverse != 0 ):\n        direction = direction + 180\n    if ( direction > 360 ):\n        direction = direction - 360\n    drivetrain.turn_to_heading(direction, DEGREES, wait=True)\n    if ( reverse != 0 ):\n        drivetrain.drive_for(REVERSE, distance, MM, wait=True)\n    else:\n        drivetrain.drive_for(FORWARD, distance, MM, wait=True)\n\ndef main():\n    drivetrain.set_drive_velocity(100,PERCENT)\n    intake_motor_group.set_velocity(90, PERCENT)\n    drivetrain.turn_for(LEFT, 73, DEGREES, wait=True)\n    intake_motor_group.spin(REVERSE)\n    # shoot first two disks into blue goal\n    drivetrain.turn_for(LEFT, 20, DEGREES, wait=True)\n\n    # get the third one\n    drivetrain.drive_for(FORWARD, 340, MM, wait=True)\n    # move the roller\n    drivetrain.turn_for(RIGHT, 95,DEGREES,wait=True)\n    intake_motor_group.stop()\n    drivetrain.drive_for(REVERSE, 40, MM, wait=True)\n    intake_motor_group.spin_for(FORWARD,40,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD, 20, MM, wait=True)\n    intake_motor_group.spin(REVERSE)\n    drivetrain.drive_for(FORWARD, 200, MM, wait=True)\n    drivetrain.turn_for(LEFT, 90, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 100, MM, wait=True)\n    wait(0.4,SECONDS)\n    drivetrain.turn_for(LEFT, 90, DEGREES, wait=True)\n    drivetrain.drive_for(REVERSE, 350, MM, wait=True)\n    drivetrain.turn_for(LEFT, 90, DEGREES, wait=True)\n    intake_motor_group.stop()\n    drivetrain.drive_for(REVERSE, 120, MM, wait=True)\n    intake_motor_group.spin_for(FORWARD,40,DEGREES,wait=True)\n    # two rollers are red now\n\n\n    drivetrain.drive_for(FORWARD, 350, MM, wait=True)\n    intake_motor_group.spin(REVERSE)\n    drivetrain.drive_for(FORWARD, 350, MM, wait=True)\n    drivetrain.turn_for(RIGHT, 78, DEGREES, wait=True)\n    drivetrain.drive_for(REVERSE, 350, MM, wait=True)\n\n\n\n\n    wait(10,SECONDS)\n    drivetrain.drive_for(REVERSE, 500, MM, wait=True)\n    drivetrain.drive_for(FORWARD, 200, MM, wait=True)\n    drivetrain.drive_for(REVERSE, 1000, MM, wait=True)\n    wait(1, SECONDS)\n    drivetrain.turn_for(LEFT, 21, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 451, MM, wait=True)\n    drivetrain.turn_for(RIGHT, 16, DEGREES, wait=True)\n    wait(1, SECONDS)\n    drivetrain.turn_for(LEFT, 26, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 499, MM, wait=True)\n    drivetrain.turn_for(RIGHT, 21, DEGREES, wait=True)\n    wait(1, SECONDS)\n    drivetrain.turn_for(LEFT, 24, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 381, MM, wait=True)\n    drivetrain.turn_for(RIGHT, 24, DEGREES, wait=True)\n    drivetrain.drive_for(REVERSE, 200, MM, wait=True)\n    wait(2, SECONDS)\n    drivetrain.turn_for(RIGHT, 9, DEGREES, wait=True)\n    drivetrain.drive_for(REVERSE, 900, MM, wait=True)\n    drivetrain.turn_for(LEFT, 19, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 350, MM, wait=True)\n    wait(3, SECONDS)\n    intake_motor_group.stop()\n    drivetrain.set_drive_velocity(100, PERCENT)\n    fork_motor_group.spin_to_position(1800, DEGREES, wait=False)\n    for x, y, r in path:            # loop for all coordinates in path array\n        goto(x, y, r)\n    pick_up() \n    goto( 1500,  100, 0)\n    stop_project()\n\n\nvr_thread(main)\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Virtual","virtualSkillsYear":"2023"}